import random
import asyncio
from datetime import datetime
from pytz import timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import easy
import hard
from keep_alive import keep_alive  # Keep the bot alive with Flask

BOT_TOKEN = "7467449022:AAEqnQDusVcovaO6afLaA94P61M70ukG8fo"
GROUP_USERNAME = "swygenbd"
ADMIN_IDS = [6243881362]  # ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐
user_data = {}
BD_TZ = timezone('Asia/Dhaka')

def load_questions(difficulty):
    if difficulty == "easy":
        return easy.questions_easy
    elif difficulty == "hard":
        return hard.questions_hard
    return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        member = await context.bot.get_chat_member(f"@{GROUP_USERNAME}", user.id)
        if member.status in ['member', 'administrator', 'creator']:
            keyboard = [
                [InlineKeyboardButton("ЁЯЯв Easy Quiz", callback_data="start_easy")],
                [InlineKeyboardButton("ЁЯФ┤ Hard Quiz", callback_data="start_hard")],
                [InlineKeyboardButton("ЁЯУК рж░рж┐ржкрзЛрж░рзНржЯ", callback_data="daily_report")],
                [InlineKeyboardButton("тЬЙя╕П ржлрж┐ржбржмрзНржпрж╛ржХ ржкрж╛ржарж╛ржи", url="https://t.me/YOUR_USERNAME")]
            ]
            await update.message.reply_text("Quiz рж╢рзБрж░рзБ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            raise Exception("Not a member")
    except:
        join_btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи", url=f"https://t.me/{GROUP_USERNAME}")],
            [InlineKeyboardButton("Joined тЬЕ", callback_data="check_join")]
        ])
        await update.message.reply_text("Quiz ржЦрзЗрж▓рждрзЗ рж╣рж▓рзЗ ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐рждрзЗ рж╣ржмрзЗ:", reply_markup=join_btn)

async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        member = await context.bot.get_chat_member(f"@{GROUP_USERNAME}", user.id)
        if member.status in ['member', 'administrator', 'creator']:
            keyboard = [
                [InlineKeyboardButton("ЁЯЯв Easy Quiz", callback_data="start_easy")],
                [InlineKeyboardButton("ЁЯФ┤ Hard Quiz", callback_data="start_hard")],
                [InlineKeyboardButton("ЁЯУК рж░рж┐ржкрзЛрж░рзНржЯ", callback_data="daily_report")],
                [InlineKeyboardButton("тЬЙя╕П ржлрж┐ржбржмрзНржпрж╛ржХ ржкрж╛ржарж╛ржи", url="https://t.me/YOUR_USERNAME")]
            ]
            await update.callback_query.edit_message_text("Quiz рж╢рзБрж░рзБ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржи ржерзЗржХрзЗ ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            raise Exception("Not Joined")
    except:
        await update.callback_query.answer("ржЖржкржирж┐ ржПржЦржиржУ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржиржирж┐!", show_alert=True)

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    difficulty = query.data.split("_")[1]
    user_id = query.from_user.id

    all_questions = load_questions(difficulty)
    asked_ids = user_data.get(user_id, {}).get("asked_ids", set())

    questions = [q for q in all_questions if q["question"] not in asked_ids]
    random.shuffle(questions)

    user_data[user_id] = {
        "questions": questions,
        "score": 0,
        "index": 0,
        "difficulty": difficulty,
        "report": {},
        "answered": False,
        "asked_ids": asked_ids
    }

    await send_question(context, query.message.chat_id, user_id)

async def send_question(context, chat_id, user_id):
    user = user_data[user_id]
    if user["index"] >= len(user["questions"]):
        await context.bot.send_message(chat_id, f"тЬЕ Quiz рж╢рзЗрж╖!\nржЖржкржирж╛рж░ рж╕рзНржХрзЛрж░: {user['score']} / {len(user['questions'])}")
        return

    q = user["questions"][user["index"]]
    options = q["options"]
    random.shuffle(options)

    buttons = [[InlineKeyboardButton(opt, callback_data=f"answer|{opt}")] for opt in options]

    user["correct"] = q["answer"]
    user["answered"] = False
    user["asked_ids"].add(q["question"])

    countdown_text = "тП│ рж╕ржорзЯ: 60 рж╕рзЗржХрзЗржирзНржб"
    msg = await context.bot.send_message(chat_id, f"*{q['category']} ржкрзНрж░рж╢рзНржи:*\n{q['question']}\n\n{countdown_text}",
                                         reply_markup=InlineKeyboardMarkup(buttons),
                                         parse_mode="Markdown")

    user["message_id"] = msg.message_id
    for t in range(59, 0, -1):
        if user["answered"]:
            return
        try:
            await asyncio.sleep(1)
            await context.bot.edit_message_text(chat_id=chat_id, message_id=msg.message_id,
                                                text=f"*{q['category']} ржкрзНрж░рж╢рзНржи:*\n{q['question']}\n\nтП│ рж╕ржорзЯ: {t} рж╕рзЗржХрзЗржирзНржб",
                                                parse_mode="Markdown",
                                                reply_markup=InlineKeyboardMarkup(buttons))
        except:
            pass

    if not user["answered"]:
        await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg.message_id, reply_markup=None)
        await context.bot.send_message(chat_id, f"тП░ рж╕ржоржпрж╝ рж╢рзЗрж╖!\nрж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржЫрж┐рж▓: {user['correct']}")
        update_daily_report(user_id, False)
        user["index"] += 1
        await send_question(context, chat_id, user_id)

def update_daily_report(user_id, correct):
    date = datetime.now(BD_TZ).strftime('%Y-%m-%d')
    if "report" not in user_data[user_id]:
        user_data[user_id]["report"] = {}

    if date not in user_data[user_id]["report"]:
        user_data[user_id]["report"][date] = {"answered": 0, "correct": 0}

    user_data[user_id]["report"][date]["answered"] += 1
    if correct:
        user_data[user_id]["report"][date]["correct"] += 1

async def answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    selected = query.data.split("|")[1]
    user = user_data.get(user_id)

    if not user or user.get("answered") == True:
        await query.answer("ржПржЗ ржкрзНрж░рж╢рзНржирзЗ ржЖржкржирж┐ ржЙрждрзНрждрж░ ржжрж┐рзЯрзЗржЫрзЗржи ржмрж╛ ржЯрж╛ржЗржо рж╢рзЗрж╖!", show_alert=True)
        return

    correct = user["correct"]
    user["answered"] = True
    is_correct = selected == correct

    if is_correct:
        user["score"] += 1
        feedback = f"тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░!\nржЖржкржирж╛рж░ рж╕рзНржХрзЛрж░: {user['score']}"
    else:
        feedback = f"тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░!\nрж╕ржарж┐ржХ ржЙрждрзНрждрж░: {correct}\nржЖржкржирж╛рж░ рж╕рзНржХрзЛрж░: {user['score']}"

    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text(feedback)
    update_daily_report(user_id, is_correct)

    user["index"] += 1
    await send_question(context, query.message.chat_id, user_id)

async def daily_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    date = datetime.now(BD_TZ).strftime('%Y-%m-%d')
    time_now = datetime.now(BD_TZ).strftime('%I:%M %p')
    report = user_data.get(user_id, {}).get("report", {}).get(date)

    if not report:
        await query.answer("ржЖржЬржХрзЗрж░ ржЬржирзНржп ржХрзЛржирзЛ рж░рж┐ржкрзЛрж░рзНржЯ ржирзЗржЗ!", show_alert=True)
    else:
        answered = report["answered"]
        correct = report["correct"]
        percentage = round((correct / answered) * 100, 2) if answered > 0 else 0
        await query.message.reply_text(f"ЁЯУЕ рждрж╛рж░рж┐ржЦ: {date}\nЁЯХТ рж╕ржорзЯ: {time_now}\nржЙрждрзНрждрж░ ржжрж┐ржпрж╝рзЗржЫрзЗржи: {answered} ржЯрж┐\nрж╕ржарж┐ржХ ржЙрждрзНрждрж░: {correct} ржЯрж┐\nрж╕ржлрж▓рждрж╛: {percentage}%")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!")
        return

    await update.message.reply_text("ржирждрзБржи ржкрзНрж░рж╢рзНржи ржпрзБржХрзНржд ржХрж░рждрзЗ ржПржЗ ржлрж░ржорзНржпрж╛ржЯрзЗ ржкрж╛ржарж╛ржи:\n"
                                    "ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐|ржкрзНрж░рж╢рзНржи|ржЕржкрж╢ржирзз,ржЕржкрж╢ржирзи,ржЕржкрж╢ржирзй,ржЕржкрж╢ржирзк|рж╕ржарж┐ржХ_ржЙрждрзНрждрж░\n"
                                    "ржЙржжрж╛рж╣рж░ржг:\nржмрж┐ржЬрзНржЮрж╛ржи|рж╕рзВрж░рзНржп ржХрзЛржи ржЧрзНржпрж╛рж╕рзЗ рждрзИрж░рж┐?|рж╣рж╛ржЗржбрзНрж░рзЛржЬрзЗржи,ржЕржХрзНрж╕рж┐ржЬрзЗржи,ржХрж╛рж░рзНржмржи,ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи|рж╣рж╛ржЗржбрзНрж░рзЛржЬрзЗржи")

async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return

    try:
        txt = update.message.text
        parts = txt.split('|')
        if len(parts) != 4:
            raise Exception("Invalid format")

        cat, ques, opts, ans = parts
        question_obj = {
            "category": cat.strip(),
            "question": ques.strip(),
            "options": [o.strip() for o in opts.split(',')],
            "answer": ans.strip()
        }
        easy.questions_easy.append(question_obj)
        await update.message.reply_text("тЬЕ ржкрзНрж░рж╢рзНржи ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ!")
    except Exception as e:
        await update.message.reply_text("тЭМ ржлрж░ржорзНржпрж╛ржЯ ржнрзБрж▓ред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржиред")

# Start the Flask app to keep the bot alive
keep_alive()

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("admin", admin_panel))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_question))
app.add_handler(CallbackQueryHandler(check_join, pattern="^check_join$"))
app.add_handler(CallbackQueryHandler(start_quiz, pattern="^start_"))
app.add_handler(CallbackQueryHandler(answer_handler, pattern="^answer\|"))
app.add_handler(CallbackQueryHandler(daily_report, pattern="^daily_report$"))

print("Bot is running...")

app.run_polling()
